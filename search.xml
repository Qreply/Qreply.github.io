<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[快速排序]]></title>
    <url>%2F2019%2F01%2F28%2F%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243package quickSort;import java.util.ArrayList;import java.util.Scanner;public class QuickSort &#123; public static int Partition(ArrayList&lt;Integer&gt; arrayList, int low, int high) &#123; int i = low, j = high; int tmp = arrayList.get(low); while(i &lt; j) &#123; while(i &lt; j &amp;&amp; arrayList.get(j) &gt;= tmp) --j; if(i &lt; j) arrayList.set(i, arrayList.get(j)); while(i &lt; j &amp;&amp; arrayList.get(i) &lt;= tmp) ++i; if(i &lt; j) arrayList.set(j, arrayList.get(i)); &#125; arrayList.set(i, tmp); return i; &#125; public static void quickSort(ArrayList&lt;Integer&gt; arrayList, int low, int high) &#123; if(low &lt; high) &#123; int part = Partition(arrayList, low, high); quickSort(arrayList, low, part - 1); quickSort(arrayList, part + 1, high); &#125; &#125; public static void main(String[] args) &#123; // TODO Auto-generated method stub Scanner scan = new Scanner(System.in); ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;(); //定义一个ArrayList,存数组 System.out.println("输入待排序数组长度"); int length = scan.nextInt(); //输入待排序数组长度 System.out.println("输入待排序数组："); for(int i = 0; i &lt; length; ++i) //输入待排序数组 arrayList.add(scan.nextInt()); quickSort(arrayList, 0, arrayList.size() - 1); System.out.println("输出带排序数组"); for(Integer a : arrayList) //输出带排序数组 System.out.print(a + " "); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>2017</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cocos2d-X游戏开发学习（一）]]></title>
    <url>%2F2019%2F01%2F23%2Fcocos2d-X%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[游戏原理与机制：渲染驱动（DirectX,openGL，Canvas、NDK)、事件驱动 游戏开发技术：平台型差异（win32开发技术DirectX,openGL、AndroidopenGL，Canvas、NDK、MACOS/IOS Quartz2D,OpenGL、） 1.认识cocos2D-X引擎 cocos2D-X跨平台解决方案 cocos2D-X版本控制 cocos2D-X功能模块 cocos2D-X数据结构 cocos2D-X开发环境搭建 csbcs bn]]></content>
      <tags>
        <tag>cocos2d-x</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机操作系统学习总结]]></title>
    <url>%2F2019%2F01%2F23%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[一、概述1.操作系统引论操作系统基本特性注意：这里指的是通用操作系统 1.并发 并发：多个事件在同一时间间隔内发生。 并行(parallel)：多个事件在同一时刻发生。 进程是指在系统中能独立运行并作为资源分配的基本单位，由一组机器指令、数据和堆栈等组成的，是一个活动实体。 多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O设备等。 通常在一个进程中可以包含若干个线程，它们可以利用进程所拥有的资源。在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。 2.共享 共享：资源可供内存中多个并发执行的进程（线程）共同使用。 有两种共享方式：互斥共享和同时访问。 并发和共享是操作系统的两个最基本的特征： 资源共享以程序(进程)的并发执行为条件； 对资源实施有效管理， 协调好诸进程对共享资源的访问，共享提高程序并发执行的程度。 并发和共享是相互依存的！！ 3.虚拟 虚拟：通过某种技术把一个物理实体变为若干个逻辑上的对应物，主要目的在于提高资源的利用率。 例子： CPU－－每个用户（进程）的”虚处理机” 存储器－－每个进程都占有的地址空间（指令＋数据＋堆栈） 显示设备－－多窗口或虚拟终端(virtual terminal) 打印设备－－将临界资源变为同时访问资源。 主要有两种虚拟技术：时分复用技术（提高资源利用率）和空分复用技术（提高存储空间利用率）。 4.异步 异步：也称不确定性，指进程的执行顺序和执行时间的不确定性。 操作系统的主要功能1.处理机管理功能 进程控制、进程同步、进程通信、进程调度 2.存储器管理功能 内存分配、内存保护、地址映射、内存扩充 3.设备管理功能 缓冲区管理、设备分配与回收、设备独立性 4.文件管理功能 文件存储空间管理、目录管理、文件读写、文件保护 5.操作系统与用户之间的接口 用户接口：联机用户接口、脱机用户接口、图形接口 二、进程管理2.进程的描述与控制进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。 进程的特征：动态性（最基本的特征）、并发性、独立性、异步性 进程的五种状态及转换 引入挂起操作后三个基本状态的转换 具有挂起状态的进程状态 具有创建、终止和挂起状态的进程状态 进程同步1.临界区 对临界资源进行访问的那段代码称为临界区。 进程采取互斥方式，实现对这种资源的共享。 2.同步与互斥 同步：多个进程按一定顺序执行； 互斥：多个进程在同一时刻只有一个进程能进入临界区。 3.信号量 信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。 down : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0； up ：对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。 down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。 如果信号量的取值只能为 0 或者 1，那么就成为了 互斥量（Mutex） ，0 表示临界区已经加锁，1 表示临界区解锁。 12345678910111213typedef int semaphore;semaphore mutex = 1;void P1() &#123; down(&amp;mutex); // 临界区 up(&amp;mutex);&#125;void P2() &#123; down(&amp;mutex); // 临界区 up(&amp;mutex);&#125; 使用信号量实现生产者-消费者问题问题描述：使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。 因为缓冲区属于临界资源，因此需要使用一个互斥量 mutex 来控制对缓冲区的互斥访问。 为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计，这里需要使用两个信号量：empty 记录空缓冲区的数量，full 记录满缓冲区的数量。其中，empty 信号量是在生产者进程中使用，当 empty 不为 0 时，生产者才可以放入物品；full 信号量是在消费者进程中使用，当 full 信号量不为 0 时，消费者才可以取走物品。 注意，不能先对缓冲区进行加锁，再测试信号量。也就是说，不能先执行 down(mutex) 再执行 down(empty)。如果这么做了，那么可能会出现这种情况：生产者对缓冲区加锁后，执行 down(empty) 操作，发现 empty = 0，此时生产者睡眠。消费者不能进入临界区，因为生产者对缓冲区加锁了，也就无法执行 up(empty) 操作，empty 永远都为 0，那么生产者和消费者就会一直等待下去，造成死锁。 12345678910111213141516171819202122232425262728#define N 100typedef int semaphore;semaphore mutex = 1;semaphore empty = N;semaphore full = 0;void producer() &#123; while(TRUE)&#123; int item = produce_item(); // 生产一个产品 // down(&amp;empty) 和 down(&amp;mutex) 不能交换位置，否则造成死锁 down(&amp;empty); // 记录空缓冲区的数量，这里减少一个产品空间 down(&amp;mutex); // 互斥锁 insert_item(item); up(&amp;mutex); // 互斥锁 up(&amp;full); // 记录满缓冲区的数量，这里增加一个产品 &#125;&#125;void consumer() &#123; while(TRUE)&#123; down(&amp;full); // 记录满缓冲区的数量，减少一个产品 down(&amp;mutex); // 互斥锁 int item = remove_item(); up(&amp;mutex); // 互斥锁 up(&amp;empty); // 记录空缓冲区的数量，这里增加一个产品空间 consume_item(item); &#125;&#125; 管程管程 (英语：Monitors，也称为监视器) 是一种程序结构，结构内的多个子程序（对象或模块）形成的多个工作线程互斥访问共享资源。 使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。 管程是为了解决信号量在临界区的 PV 操作上的配对的麻烦，把配对的 PV 操作集中在一起，生成的一种并发编程方法。其中使用了条件变量这种同步机制。 c 语言不支持管程，下面的示例代码使用了类 Pascal 语言来描述管程。示例代码的管程提供了 insert() 和 remove() 方法，客户端代码通过调用这两个方法来解决生产者-消费者问题。 1234567891011121314monitor ProducerConsumer integer i; condition c; procedure insert(); begin // ... end; procedure remove(); begin // ... end;end monitor;Click to copy 管程有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否者其它进程永远不能使用管程。 管程引入了 条件变量 以及相关的操作：wait() 和 signal() 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。 使用管程实现生产者-消费者问题123456789101112131415161718192021222324252627282930313233343536373839404142// 管程monitor ProducerConsumer condition full, empty; integer count := 0; condition c; procedure insert(item: integer); begin if count = N then wait(full); insert_item(item); count := count + 1; if count = 1 then signal(empty); end; function remove: integer; begin if count = 0 then wait(empty); remove = remove_item; count := count - 1; if count = N -1 then signal(full); end;end monitor;// 生产者客户端procedure producerbegin while true do begin item = produce_item; ProducerConsumer.insert(item); endend;// 消费者客户端procedure consumerbegin while true do begin item = ProducerConsumer.remove; consume_item(item); endend; 经典进程的同步问题生产者和消费者问题前面已经讨论过了。 1.哲学家进餐问题 五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。 方案一：下面是一种错误的解法，考虑到如果所有哲学家同时拿起左手边的筷子，那么就无法拿起右手边的筷子，造成死锁。 1234567891011121314#define N 5 // 哲学家个数void philosopher(int i) // 哲学家编号：0 － 4&#123; while(TRUE) &#123; think(); // 哲学家在思考 take_fork(i); // 去拿左边的叉子 take_fork((i + 1) % N); // 去拿右边的叉子 eat(); // 吃面条中…. put_fork(i); // 放下左边的叉子 put_fork((i + 1) % N); // 放下右边的叉子 &#125;&#125;Click to copy 方案二：对拿叉子的过程进行了改进，但仍不正确 1234567891011121314#define N 5 // 哲学家个数while(1) // 去拿两把叉子&#123; take_fork(i); // 去拿左边的叉子 if(fork((i+1)%N)) &#123; // 右边叉子还在吗 take_fork((i + 1) % N);// 去拿右边的叉子 break; // 两把叉子均到手 &#125; else &#123; // 右边叉子已不在 put_fork(i); // 放下左边的叉子 wait_some_time(); // 等待一会儿 &#125;&#125;Click to copy 方案三：等待时间随机变化。可行，但非万全之策 1234567891011121314#define N 5 // 哲学家个数while(1) // 去拿两把叉子&#123; take_fork(i); // 去拿左边的叉子 if(fork((i+1)%N)) &#123; // 右边叉子还在吗 take_fork((i + 1) % N);// 去拿右边的叉子 break; // 两把叉子均到手 &#125; else &#123; // 右边叉子已不在 put_fork(i); // 放下左边的叉子 wait_random_time( ); // 等待随机长时间 &#125;&#125;Click to copy 方案四：互斥访问。正确，但每次只允许一人进餐 123456789101112131415semaphore mutex // 互斥信号量，初值1void philosopher(int i) // 哲学家编号i：0－4 &#123; while(TRUE)&#123; think(); // 哲学家在思考 P(mutex); // 进入临界区 take_fork(i); // 去拿左边的叉子 take_fork((i + 1) % N); // 去拿右边的叉子 eat(); // 吃面条中…. put_fork(i); // 放下左边的叉子 put_fork((i + 1) % N); // 放下右边的叉子 V(mutex); // 退出临界区 &#125;&#125;Click to copy 正确方案如下： 为了防止死锁的发生，可以设置两个条件（临界资源）： 必须同时拿起左右两根筷子； 只有在两个邻居都没有进餐的情况下才允许进餐。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//1. 必须由一个数据结构，来描述每个哲学家当前的状态#define N 5#define LEFT i // 左邻居#define RIGHT (i + 1) % N // 右邻居#define THINKING 0#define HUNGRY 1#define EATING 2typedef int semaphore;int state[N]; // 跟踪每个哲学家的状态//2. 该状态是一个临界资源，对它的访问应该互斥地进行semaphore mutex = 1; // 临界区的互斥//3. 一个哲学家吃饱后，可能要唤醒邻居，存在着同步关系semaphore s[N]; // 每个哲学家一个信号量void philosopher(int i) &#123; while(TRUE) &#123; think(); take_two(i); eat(); put_tow(i); &#125;&#125;void take_two(int i) &#123; P(&amp;mutex); // 进入临界区 state[i] = HUNGRY; // 我饿了 test(i); // 试图拿两把叉子 V(&amp;mutex); // 退出临界区 P(&amp;s[i]); // 没有叉子便阻塞&#125;void put_tow(i) &#123; P(&amp;mutex); state[i] = THINKING; test(LEFT); test(RIGHT); V(&amp;mutex);&#125;void test(i) &#123; // 尝试拿起两把筷子 if(state[i] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp; state[RIGHT] !=EATING) &#123; state[i] = EATING; V(&amp;s[i]); // 通知第i个人可以吃饭了 &#125;&#125; 读者-写者问题允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写操作同时发生。读者优先策略 Rcount：读操作的进程数量（Rcount=0） CountMutex：对于Rcount进行加锁（CountMutex=1） WriteMutex：互斥量对于写操作的加锁（WriteMutex=1） 123456789101112131415161718192021222324252627282930Rcount = 0;semaphore CountMutex = 1;semaphore WriteMutex = 1;void writer()&#123; while(true)&#123; sem_wait(WriteMutex); // TO DO write(); sem_post(WriteMutex); &#125;&#125;// 读者优先策略void reader()&#123; while(true)&#123; sem_wait(CountMutex); if(Rcount == 0) sem_wait(WriteMutex); Rcount++; sem_post(CountMutex); // TO DO read(); sem_wait(CountMutex); Rcount--; if(Rcount == 0) sem_post(WriteMutex); sem_post(CountMutex); &#125;&#125; 线程线程——作为调度和分派的基本单位 具有执行状态（状态转换） 不运行时保存上下文 有一个执行栈 有一些局部变量的静态存储 可存取所在进程的内存和其他资源 可以创建、撤消另一个线程 线程与进程的比较：1.引入线程的好处： ·创建一个新线程花费时间少（结束亦如此） ·两个线程的切换花费时间少（如果机器设有“存储[恢复]所有寄存器”指令，则整个切换过程用几条指令即可完成） ·同一进程内的线程之间相互通信无须调用内核(共享内存和文件） ·适合多处理机系统 2.调度的基本单位： 线程作为调度的基本单位，同进程中线程切换不引起进程切换，当不同进程的线程切换才引起进程切换；进程作为拥有资源的基本单位。 3.并发性 一个进程间的多个线程可并发。 4.拥有资源： 线程仅拥有隶属进程的资源；进程是拥有资源的独立单位。 5.独立性： 每个进程拥有独立的地址空间和私有资源；同一个进程的线程之间共享进程的地址空间和资源。 6.系统开销： 进程大；线程小。 7.支持多处理机系统： 传统进程仅能运行在一个处理机上，多线程可以运行在多处理机上。 8.线程和进程的关系 单进程、单线程 单进程、多线程 多进程、一个进程一个线程 多进程、一个进程多个线程 3.处理机调度与死锁3.1处理机调度的层次高级调度（作业调度或长程调度）、低级调度（进程调度或短程调度）、中级调度（中程调度） 3.2作业与作业调度作业状态间转换 接纳哪些作业，取决于作业调度算法 先来先服务(FCFS)/先进先出(FIFO)调度算法 按照作业/进程进入系统的先后次序进行调度，先进入系统者先调度；即启动等待时间最长的作业/进程 最简单的调度算法，既可用于作业调度，也可用于进程调度 短作业(进程)优先调度算法SJ(P)F 按运行时间长短进行调度，即先启动要求运行时间最短的作业（进程） 优先级调度算法 对于先来先服务算法，作业的等待时间就是作业的优先级，等待时间越长，优先级越高。 对于短作业优先算法，作业的长短就是作业的优先级，作业所需时间越短，其优先级越高。 在优先级算法，根据作业的紧迫程度，由外部给予作业不同的优先级，然后根据优先级调度。 高响应比优先调度算法（HRRN） 3.3 进程调度轮转调度算法 系统将所有的就绪进程按先来先服务的原则排成一个队列，每次调度时，把CPU分配给队首进程，并令其执行一个时间片。 当执行的时间片用完时，由一个计时器发出时钟中断请求，调度程序便停止该进程的执行，并将其放就绪队列尾；然后，再把处理机分配给就绪队列中新的队首。 时间片的大小从几ms到几百ms。 优先级调度算法 为每个进程分配一个优先级，按优先级进行调度。 为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。 多队列调度算法 单一就绪队列→多个就绪队列 例，将就绪进程分别进入前台和后台就绪队列 前台就绪队列是交互性作业的进程，通常采用时间片轮转。 后台的就绪队列是批处理作业的进程，通常采用优先级或短作业优先算法。 调度方式有两种： 优先调度前台，若前台无可运行进程，才调度后台。 分配占用CPU的时间比例，如：前台80%，后台20% 多级反馈队列调度算法 设置多个就绪队列，各个队列赋予不同的优先级 第一个队列的优先级最高，第二个队列次之，其余各队列的优先级逐个降低 各个队列中进程执行时间片的大小也各不相同，在优先级愈高的队列中，为每个进程所规定的执行时间片就愈小。例，第二个队列的时间片要比第一个队列的时间片长一倍，……，第*i*+1个队列的时间片要比第i个队列的时间片长一倍 3.5 死锁多个进程因竞争共享资源而造成的一种僵局，若无外力作用，这些进程都将永远不能再向前推进。 共同点：形成环路 产生死锁的必要条件 互斥：进程对所分配到的资源进行排它性的使用。 请求和保持 ：进程已经至少保持了一个资源，但又提出了新的资源请求，而该资源又已被其他进程占有。 不可抢占 ：进程已获得的资源在未使用完之前不能被剥夺。 循环等待：发生死锁时，必然存在一个进程-资源循环等待的环形链。 关于死锁的一些结论 参与死锁的进程最少是两个 参与死锁的进程至少有两个已经占有资源 参与死锁的所有进程都在等待资源 参与死锁的进程是当前系统中所有进程的子集 处理死锁的方法 预防死锁：破坏”请求和保持“条件、破坏”不可抢占“条件、破坏”循环等待“条件 避免死锁：系统安全状态、银行家算法、资源分配图 在程序运行时避免发生死锁，在使用前进行判断，只允许不会出现死锁的进程请求资源。 检测与解除死锁： 死锁的解除：剥夺资源、撤销进程 三、内存管理4.存储器管理5.虚拟存储器四、I/O系统6.输入输出系统五、文件管理7.文件管理8.磁盘存储器的管理]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下解决Hexo发布博客引用自带图片]]></title>
    <url>%2F2019%2F01%2F22%2FMac%E4%B8%8B%E8%A7%A3%E5%86%B3Hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E8%87%AA%E5%B8%A6%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[下载图床神器iPic​ 有了图床神器 iPic，不论屏幕截图、还是复制图片，都可以自动上传、保存 Markdown 格式的链接，直接粘贴插入 图片上传方式参考：https://toolinbox.net/iPic/]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客美化及功能增添]]></title>
    <url>%2F2019%2F01%2F21%2FHexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%A2%9E%E6%B7%BB%2F</url>
    <content type="text"><![CDATA[Hexo博客美化及功能增添补充上一篇——Mac下使用Hexo+Github搭建个人博客 6.Hexo博客美化及功能增添1.选主题Hexo官网：https://hexo.io/themes/里面有特别多的主题可以选择，我在这里选的是next这个主题。下载主题： 12cd ~/bloggit clone https://github.com/iissnan/hexo-theme-next themes/next ·修改站点配置文件：_config.yml，将里面76行的theme由landscape修改为next ·更换新的主题，可能会有一些延迟 2.通过站点配置文件修改网站细节 需要修改的内容可以参考网站：https://hexo.io/zh-cn/docs/configuration, 里面对各个参数有一些详细的解释，我这里修改一些博客的标题，副标题，描述，语言等。这里我想说的是，一般你修改一项，重新部署网站一下，因为一旦出错，就比较容易找到原因。 修改博客标题、作者、语言说明:hexo 下的_config.yml 称为站点配置文件themes/next 中的_config.yml 称为主题配置文件 这样还是不起作用的话,请查看theme/next/languages/目录下是否有zh-Hans.yml 文件.一般是有zh-CN.yml 但是我们按照 hexo 文档language是这样的: 1language: zh-Hans // 这里设置语言 简体中文 所以要把zh-CN.yml文件改成名字为zh-Hans.yml就可以了 效果如图： 3.主题文件修改博客内容·关键也是同样名字的配置文件：_config.yml，看一下里面的内容。 修改整个主题，不需要的用#注释掉，这里我已经将默认的Muse注释掉，改为Pisces 将menu也修改，本来只有首页和归档，限制添加标签和分类，只需要去掉前面的#，现在来看一下效果。 效果如图： ·需要新建一个分类和标签页面 123cd ~/blog/source/hexo new page categorieshexo new page tags 编辑刚新建的页面，将页面的type设置为categories,主题将自动为这个页面显示分类。页面内容如下： 添加分类类型 4.设置侧边栏的社交连接 添加友情链接 5.设置打赏功能，不管有没有人，设置一下这个功能还是挺好的。越来越多的平台(微信公众平台，新浪微博，简书，百度打赏等)支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。只需要主题配置文件中填入微信和支付宝收款二维码图片地址即可开启该功能。 EXAMPLE -打赏功能配置示例:12345reward: enable: true comment: 你可以对我打赏了哦 wechatpay: /images/wechatpay.jpg alipay: /images/alipay.jpg 6.设置头像为圆形可旋转 进入以下目录： 12cd ~/blog/themes/next/source/css/_common/components/sidebar/vim sidebar-author.styl 7.首页文章设置阅读全文 12cd ~/blog/themes/next/vim _config.yml 8.添加动态背景进入主题配置文件 9).博客添加fork Github 进入 http://tholman.com/github-corners/ 选取自己喜欢的风格 我选取的第一个，复制该代码。 12cd ~/blog/themes/next/layout/ //进入该配置文件vim _layout.swig //编辑 10.修改文章内链接样式 12cd ~/blog/themes/next/source/css/_common/components/post/vim post.styl 11.修改文章底部带#的标签 12cd ~/blog/themes/next/layout/_macro/vim post.swig 12.Valine评论注册LeanCloud 点击设置 点击应用key 进入主题配置文件_config.yml，appid、appkey已复制 13.增加搜索功能 参考Next官方文档·添加不蒜子统计功能进入主题配置文件 14.增加加载效果编辑主题配置文件 12pace: truepace_theme: space-theme-center-circle 15.点击爆炸效果 首先在themes/next/source/js/src里面建一个叫fireworks.js的文件，代码如下： 1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 打开themes/next/layout/_layout.swig,在上面写下如下代码： 12345&#123;% if theme.fireworks %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 打开主题配置文件，在里面最后写下： 12# Fireworksfireworks: true 16.隐藏网页底部强力驱动 1234567891011121314151617181920/blog/themes/next/layout/_partials //进入该文件夹vim footer.swig 编辑该文件####把下面这些注释掉&lt;!--&#123;% if theme.footer.powered.enable %&#125; &lt;div class=&quot;powered-by&quot;&gt;&#123;# #&#125;&#123;&#123; __(&apos;footer.powered&apos;, next_url(&apos;https://hexo.io&apos;, &apos;Hexo&apos;, &#123;class: &apos;theme-link&apos;&#125;)) &#125;&#125;&#123;# #&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env(&apos;version&apos;) &#125;&#125;&#123;% endif %&#125;&#123;# #&#125;&lt;/div&gt;&#123;% endif %&#125;&#123;% if theme.footer.powered.enable and theme.footer.theme.enable %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125;&#123;% if theme.footer.theme.enable %&#125; &lt;div class=&quot;theme-info&quot;&gt;&#123;# #&#125;&#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; – &#123;&#123; next_url(&apos;https://theme-next.org&apos;, &apos;NexT.&apos; + theme.scheme, &#123;class: &apos;theme-link&apos;&#125;) &#125;&#125;&#123;# #&#125;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;##&#125;&lt;/div&gt;&#123;% endif %&#125;--&gt; 17.增加内容分享服务 效果如下：]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux运行状态相关命令]]></title>
    <url>%2F2019%2F01%2F20%2Flinux%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[服务器运行状态相关命令ps查看系统进程线程 基本用法ps -aux 查看所有进程ps -T -p ${pid} 查看某个进程的线程 参考资料10个重要的Linux ps命令实战 pstree查看系统进程树，他可以把各个进程之间的关系用树形结构标识出来。 基本用法1pstree top查看系统进程线程运行情况，包裹资源的使用情况，系统负载等。 基本用法top 列出所有线程负载信息top -H 列出所有线程的负载信息top -H -p ${pid} 列出某个pid下所有线程的负载信息 free查看内存及使用情况 基本用法1free 文件操作相关cat查看配置文件，或者是日志文件，但是有点需要注意，cat命令会把整个文件输出到终端了，如果文件内容非常多，建议使用grep进行过滤，或者直接用less或more命令。 基本用法1cat file.txt tail查看某个文件的尾部，或者查看标准出入的最末尾，默认值显示10行，可以用-n参数来指定输出多少行。 基本用法tail -n 100 file.txt 输出最末尾的100行tail -f file.txt 随着文件新增，持续输出新增的内容，一般用来看实时日志 head和tail命令很相似，不过head是输出头部内容 基本用法head -n 100 file.txt 输出最开始的100行 more也是用来查看文件，但more命令只加载一屏的内容，可以向下翻动，因为加载的内容少，所以比cat快多了。 基本用法1more file.txt less和more很像，但是可以上下翻动 基本用法1less file.txt grep基本用法grep &quot;abc&quot; file 从file中筛选出包含 abc的行。 awk在文件有多列的时候，可以用awk输出具体某几列，或者做一些简单的统计 求和，求平均值啊，再或者做一下简单的数据格式化。 基本用法cat data | awk &#39;{print $1,$3,$5}&#39; 输出第1 3 5列，注意下标是从1开始cat data | awk &#39;{ sum += $1 } END { print sum }&#39; 对第一列求和cat data | awk -F&#39;\t&#39; &#39;{print $1,$3}&#39; 把每行数据按tab分列，并输出1 3列 参考资料阮一峰 awk介绍 sort对标准内容做排序， 基本用法cat file|sort 把file里的数据排序，注意是按字典序排的，如果想按数值排，需要能够加-n参数cat file|sort -k2 -n -r 按第二列 数值 倒序 排序，-k指定第几列，-r是翻转reverse的意思 uniq对排序好的内容去重，注意它只是把相邻且相同的去重，所以如果想要全局去重，需要先用sort排序。 基本用法cat file|sort|uniq 把file里的文件排序并去重cat file|sort|uniq -c 把file里的文件排序并去重，且输出每行出现的次数 sedparallellinux大部分命令都是单进程的，这个命令可以让其他命令多进程执行。 参考资料15分钟神器gnu parallel 入门观止 scp之前运维大量机器的时候，通常需要批量修改某个配置文件，都是在一台机器上改好，然后用scp脚本分发到其他机器上去的，大大提高效率。 基本用法scp aaa.txt test@192.168.1.3:/tmp/ 把当前目录下的aaa.txt文件通过192.168.1.3上的test账号放到/tmp目录下scp test@192.168.1.3:/tmp/aaa.txt . 和上一条相反 磁盘及IOdu查看目录大小 基本用法du -h --max-depth=1 输出最深1层的目录，然后文件大小用人类可读的方式，比如1K 234M 2G df查看磁盘大小和占用情况 基本用法df -h 查看各个分区的大小和使用情况 iostat查看磁盘的io状态 iotop可以类似于top目录一样，实时显示各个进程的io状态。 find查找文件，查找条件可以是文件名，文件日期，文件大小，很强大。 基本用法find /home/test -iname &quot;test.txt 在/home/test/下找文件名为test.txt的文件，也支持通配符find /home/test -isize +100M 查找/home/test下大于100M的文件 参考资料wikipedia unix find) locate定位某个具体文件的位置，locate命令要比find -name快得多，原因是它不搜索具体目录，而是搜索一个数据库/var/lib/mlocate/mlocate.db，这个数据库会通过一个cron定时更新，所以有可能新建的文件会检索不到。 基本用法locate a.txt 定位a.txt的位置，如果系统中有多个a.txt，会全部显示出来。 tree可以看到树状目录结构， 基本用法tree -L 2 只显示两层树状结构 网络ping查看网络是否通 基本用法1ping www.baidu.com ncnetcat，可以用来看远程某个端口是否打开，功能很强大，但是我用到的不多。 基本用法nc -z xindoo.me 443 检测我服务器上的443端口是否开放（当然是开的） 参考资料linux nc命令介绍 route查看和操作本机路由表 基本用法route 列出本地路由表 参考资料百度百科 route命令 netstat查看本机的网络状态，可以看到端口占用情况和网络链接情况。 基本用法1netstat -antp traceroute查看一个请求到目标服务器所经过的所有路由节点，一般用来排查网络问题。 基本用法1traceroute www.baidu.com 参考资料百度百科 netstat iftop查看实时网络io情况 lsof查看端口占用 dig查看域名的信息 基本用法1dig www.baidu.com 参考资料dig 命令介绍 curl发起一个http请求，来验证服务是否能正常访问的，它有获取html源码的功能。 基本用法curl www.baidu.comcurl -I www.baidu.com 获取请求baidu.com的请求头 参考资料curl的用法(英文) wget下载网络上一个文件，基本上就是有个命令行版的下载工具了。 基本用法wget xindoo.me/test.txt 把服务器上test.txt文件下载到本地 其他yum|apt install很多时候服务器上没有我们想要的工具，可以用这个命令安装下，yum是Fedora和RedHat以及CentOS中的Shell前端软件包管理器， apt是ubuntu平台上的。 基本用法12yum install curl``apt install curl man这个命令是用来查看其它命令手册的，可以看到具体某个命令的详细作用，和具体参数。这个是个很重要的命令了，一般他会比各命令自带的–help详细很多。 基本用法man curl 查看curl命令的手册]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下使用Hexo+Github搭建个人博客]]></title>
    <url>%2F2019%2F01%2F20%2FMac%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Mac下使用Hexo+Github搭建个人博客hexo博客系统搭建Hexo的介绍可以看看官方文档，说得很详细，简单的说就是一个博客框架。 1.Github账号注册及仓库创建 创建仓库的名字必须为username.github.io，我的用户名为Qreply，因此我创建的仓库就是Qreply.github.io，这是很关键的一点，很重要。输入名字后，直接点最下面绿色的按钮，创建新仓库。这一部分基本完成了，接下去需要在终端操作。 2.环境配置·安装git、node.js和hexo12345678#首先检查是否安装了git和node.js,终端输入以下命令node -v #是否出现安装版本信息，出现说明已经安装git --version #同上述情况如果没有安装，则进行安装#通过homebrew安装/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;brew install gitbrew install node ·如果已经安装好了上述的软件，那么可以安装hexo，然后等待安装成功即可。1npm install -g hexo-cli ·创建blog文件夹，并初始化建立博客框架12345678# 在你的家目录下创建一个blog文件夹mkdir blog# 进入目录cd blog# 初始化目录hexo init开启本地服务 # hexo s 出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。 博客关联到Github仓库 在第一步的时候，我们已经将仓库创建好了，这里就需要用到了。 ·首先我们要编辑图中_config.yml文件，这是博客的主要配置文件，在下面一部分，我们要频繁使用这个配置文件，这里先编辑一步，为了管理GitHub账号。 ·打开文件之后，在文档最后，输入红色大框中的内容，只需要将你的username替换就可以了，其他无需更改。 ·然后在目录中执行 1234# 产生静态网页hexo g# 部署到GitHub page上hexo d 然后你需要输入你GitHub的用户名和密码，这样你就就可以使用你的仓库名去访问你的博客主页了。为了每一次部署不必一种输入密码，我们可以生成秘钥，然后提交到GitHub，进行关联，那么你下次就不需要再输入密码了。·关联GitHub账号，免密提交 12345678# 用你注册GitHub时的邮箱号，进行秘钥生成cd ~ssh-keygen -t rsa -C &quot;xxxxxxx@qq.com&quot;# 系统就会生成一个隐藏文件夹.sshcd .sshls# 复制公钥vim id_rsa.pub 点击箭头的按钮，进入设置，然后点击SSH and GPG keys，创建新的SSH，将之前复制的公钥黏贴，提交，OK。 进入settings 4.博客的基本配置和发布新文章1.一些基本配置可以在_config.yml中进行修改，如博客名、作者名等，另外如果你采用了别的主题，在主题文件夹中也会有一个_config.yml文件，可以在里面进行主题的一些修改。2.发布新文章时，先执行以下命令：1hexo new post &apos;文章标题&apos; 这时在source-&gt;_posts文件下能看到新建的文章，是md格式，hexo支持markdown语法，我们可以用markdown编辑器进行编辑。3.更新到github我们每次做了修改后，都需要执行以下命令以更新github配置123hexo cleanhexo ghexo d 5. 绑定个人域名1)购买域名（我在腾讯云购买的域名）2)域名解析注册一个DNSPod账号，登录之后进入需要绑定的域名，在域名解析界面添加3条记录123@ A 192.30.252.153@ A 192.30.252.154www CNAME username.github.io. 如图所示： 3)配置hexo新建一个名为CNAME的文件，无后缀，内容为你的域名地址。将该文件放入本地博客的source文件夹里面，并更新到Github。 1hexo d -g 到这里就绑定域名成功了。 6.Hexo博客美化及功能增添1）选主题Hexo官网：https://hexo.io/themes/里面有特别多的主题可以选择，我在这里选的是next这个主题。下载主题： 12cd ~/bloggit clone https://github.com/iissnan/hexo-theme-next themes/next ·修改站点配置文件：_config.yml，将里面76行的theme由landscape修改为next ·更换新的主题，可能会有一些延迟]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[质数]]></title>
    <url>%2F2019%2F01%2F12%2F%E8%B4%A8%E6%95%B0%2F</url>
    <content type="text"><![CDATA[从键盘上随机输入20个正整数，找出并输出所包含的质数（质数是除了1和它本身之外，不能被其他数整除的正整数，例如2，3，5，11，13等）。 1234567891011121314151617181920212223242526272829package primeNumber;import java.util.Scanner;public class PrimeNumber &#123; public static boolean IsPrime(int a) &#123; //判断是否为质数 if(a == 1) return false; //1不是质数 for(int i = 2; i &lt;= Math.sqrt(a); ++i) &#123; if(a % i == 0) return false; &#125; return true; &#125; public static void main(String[] args) &#123; // TODO Auto-generated method stub Scanner scan = new Scanner(System.in); int[] arr = new int[21]; //定义一个数组 //输入20个正整数 for(int i = 0; i &lt; 20; ++i) arr[i] = scan.nextInt(); //找出质数并输出 for(int i = 0; i &lt; 20; ++i) &#123; //判断是不是质数，是就输出 if(IsPrime(arr[i])) System.out.print(arr[i] + " "); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>2017</tag>
        <tag>NPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符串反转]]></title>
    <url>%2F2019%2F01%2F12%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[请编写程序，将用户输入否认一个字符串（不多于100个字符），其中的单词按照逆序，重新输出。例如输入字符串”this is a dog”，输出为”dog a is this”。 123456789101112131415161718package reverseString;import java.util.Scanner;public class ReverseString &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub Scanner scan = new Scanner(System.in); String str1 = scan.nextLine();//输入字符串 String[] strs = str1.split(" ");//以空格分割成多个字符串 for(int i = strs.length - 1; i &gt;= 0; --i) &#123;//逆序输出 if(i != strs.length - 1) System.out.print(" "); System.out.print(strs[i]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>2017</tag>
        <tag>NPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学生成绩统计]]></title>
    <url>%2F2019%2F01%2F12%2F%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[编写一个考试成绩统计程序，将从键盘上输入的学生考试成绩（最多40个），计算输出学生平均成绩，以及不及格学生数量（成绩&lt;60分）和成绩优秀学生数量（成绩&gt;=90分）。 12345678910111213141516171819202122232425262728package scoreStudent;import java.util.Scanner;public class ScoreStudnet &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub Scanner scan = new Scanner(System.in); int[] score = new int[50];//定义一个数组,存储学生成绩 int length = 0, sum = 0, lowScore = 0, highScore = 0; while(scan.hasNextInt()) &#123; //是否还有成绩输入 int a = scan.nextInt(); //学生成绩 score[length++] = a; if(a &lt; 60) lowScore++; //成绩低于60的，不及格人数加1 if(a &gt;= 90) highScore++; //成绩大于等于90的，优秀人数加1 sum += a; //总成绩 &#125; //平均成绩 double average = (double)sum / (length * 0.01); System.out.println("学生平均成绩为：" + average); System.out.println("不及格学生数量为：" + lowScore); //不及格人数 System.out.println("成绩优秀学生数量为：" + highScore);//成绩优秀人数 &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>2017</tag>
        <tag>NPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符-数字统计]]></title>
    <url>%2F2019%2F01%2F12%2F%E5%AD%97%E7%AC%A6-%E6%95%B0%E5%AD%97%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[从键盘输入一个字符串（不多于80个字符），将其中的数字字符按原顺序组成一个新字符串，并输出。 1234567891011121314151617181920212223242526package numString;import java.util.Scanner;public class NumString &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub Scanner scan = new Scanner(System.in); String str = scan.next(); //输入一个字符串 char [] strArr = str.toCharArray(); //把字符串转为数组 StringBuffer buf = new StringBuffer(); for(int i = 0; i &lt; strArr.length; ++i) &#123; char a = strArr[i]; if(Character.isDigit(a)) //判断是否为数字 buf.append(a); &#125; String s = buf.toString(); //转换为字符串 System.out.println(s); //输出新字符串 &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>2017</tag>
        <tag>NPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[n的阶乘]]></title>
    <url>%2F2019%2F01%2F12%2Fn%E7%9A%84%E9%98%B6%E4%B9%98%2F</url>
    <content type="text"><![CDATA[编写程序，从键盘输入任一正整数n,计算并输出数字n的阶乘n! 1234567891011121314151617181920package factorial;import java.util.Scanner;public class Factorial &#123; public static int solve(int n) &#123; //求n的阶乘 if(n == 0 || n == 1) return 1; else return solve(n - 1) * n; &#125; public static void main(String[] args) &#123; // TODO Auto-generated method stub Scanner scan = new Scanner(System.in); System.out.println("输入任一整数："); int n = scan.nextInt(); //输入任一整数n System.out.println(n + "的阶乘为：" + solve(n)); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>2017</tag>
        <tag>NPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[冒泡排序]]></title>
    <url>%2F2019%2F01%2F11%2F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940package bubbleSort;import java.util.Scanner;public class BubbleSort &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub int[] a; //定义一个数组 Scanner scan = new Scanner(System.in); System.out.println("输入待排序数组长度"); int length = scan.nextInt(); //输入数组的长度 a = new int[length + 1]; //分配内存 System.out.println("输入待排序数组"); for(int i = 0; i &lt; length; ++i) //输入待排序数组 a[i] = scan.nextInt(); boolean ok = false; for(int i = 0; i &lt; length - 1; ++i) &#123; //冒泡排序 ok = false; for(int j = 0; j &lt; length - i - 1; ++j) if(a[j] &gt; a[j + 1]) &#123; //若后一个元素比前一个大，则交换 ok = true; //发生交换 int temp = a[j + 1]; a[j + 1] = a[j]; a[j] = temp; &#125; if(ok == false) break; //如果此趟没有发生交换，则说明数组已经有序 &#125; System.out.println("输入排序后数组"); for(int i = 0; i &lt; length; ++i) &#123; //输出排序后数组 if(i != 0) System.out.print(" "); //按1 2 3 4 5的格式输出 System.out.print(a[i]); &#125; System.out.print("\n"); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>2017</tag>
        <tag>NPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
